# -*- coding: utf-8 -*-
"""stockdeployment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_jcgXMz2Ns1xbO7_JdsSt3rBLoVpDG6r
"""

import streamlit as st

import pandas as pd
from sklearn.preprocessing import StandardScaler
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error

# Load the data
data = pd.read_csv('stockprice.csv')



# Set the training size to 80% of the dataset
train_size = int(len(data) * 0.8)

# Split the data into training and testing sets
train_data = data.iloc[:train_size]
test_data = data.iloc[train_size:]

# Model training
model = ARIMA(train_data['close'], order=(1, 0, 2))
model_fit = model.fit()

# Make forecasts for the next 30 days using the fitted model
forecast = model_fit.forecast(steps=30)

# Get the actual closing prices for the next 30 days from the testing data
actual_prices = test_data['close'].values[:30]

forecast_df = pd.DataFrame(forecast)


forecast_df.rename(columns={'predicted_mean': 'predicted_values'}, inplace=True)

# If you want to reset the index as well
forecast_df.reset_index(inplace=True, drop=True)

actual_prices_df = pd.DataFrame(actual_prices)

actual_prices_df.rename(columns={0: 'actual_values'}, inplace=True)

# If you want to reset the index as well
actual_prices_df.reset_index(inplace=True, drop=True)

result = pd.concat([actual_prices_df, forecast_df], axis=1)

# Evaluate performance using Mean Squared Error
mse = mean_squared_error(actual_prices, forecast)

# Streamlit UI
st.title('Stock Price Forecasting')

st.write("### Actual vs Predicted Closing Prices for Next 30 Days")
st.write("Actual Closing Prices:")
st.write(actual_prices)
st.write("Predicted Closing Prices:")
st.write(forecast)
st.write("Compare actual and predicted closing prices")
st.write(result)
st.write("Mean Squared Error:", mse)

data

